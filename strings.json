{
  "en-us": {
    "argument_reporter_boolean": "{VALUE}",
    "argument_reporter_string_number": "{VALUE}",
    "bargraphmonitor_barGraphChangeValue": "change {COLOR} bar value by {VALUE}",
    "bargraphmonitor_barGraphClearData": "clear bar graph",
    "bargraphmonitor_barGraphGetValue": "{COLOR} bar value",
    "bargraphmonitor_barGraphHide": "hide bar graph",
    "bargraphmonitor_barGraphSetValue": "set {COLOR} bar value to {VALUE}",
    "bargraphmonitor_barGraphShow": "show bar graph {VALUE}",
    "bargraphmonitor_custom-color": "{field_bargraphmonitor_custom-color}",
    "bargraphmonitor_custom-color": "{field_bargraphmonitor_custom-color}",
    "bargraphmonitor_custom-color": "{field_bargraphmonitor_custom-color}",
    "control_else": "else",
    "control_forever": "forever",
    "control_if": "if {CONDITION} then",
    "control_if_else": "if {CONDITION} then",
    "control_repeat": "repeat {TIMES}",
    "control_repeat_until": "repeat until {CONDITION}",
    "control_wait": "wait {DURATION} seconds",
    "control_wait_until": "wait until {CONDITION}",
    "data_addtolist": "add {ITEM} to {LIST}",
    "data_changevariableby": "change {VARIABLE} by {VALUE}",
    "data_deletealloflist": "delete all of {LIST}",
    "data_deleteoflist": "delete {INDEX} of {LIST}",
    "data_insertatlist": "insert {ITEM} at {INDEX} of {LIST}",
    "data_itemnumoflist": "item # of {ITEM} in {LIST}",
    "data_itemoflist": "item {INDEX} of {LIST}",
    "data_lengthoflist": "length of {LIST}",
    "data_listcontainsitem": "{LIST} contains {ITEM} ?",
    "data_replaceitemoflist": "replace item {INDEX} of {LIST} with {ITEM}",
    "data_setvariableto": "set {VARIABLE} to {VALUE}",
    "displaymonitor_custom-image": "{field_displaymonitor_custom-image}",
    "displaymonitor_custom-image": "{field_displaymonitor_custom-image}",
    "displaymonitor_displayHide": "hide display",
    "displaymonitor_displayNext": "next image",
    "displaymonitor_displaySetImage": "set image to {VALUE}",
    "displaymonitor_displaySetImageForTime": "set image to {VALUE} for {DURATION} seconds",
    "displaymonitor_displaySetMonitorFullscreen": "show display {VALUE}",
    "displaymonitor_displayWrite": "write {TEXT}",
    "displaymonitor_displayWriteForTime": "write {TEXT} for {DURATION} seconds",
    "event_broadcast": "broadcast {BROADCAST_INPUT}",
    "event_broadcastandwait": "broadcast {BROADCAST_INPUT} and wait",
    "event_whenbroadcastreceived": "when I receive {BROADCAST_OPTION}",
    "flippercontrol_stop": "stop {STOP_OPTION}",
    "flippercontrol_stopOtherStacks": "stop other stacks",
    "flipperdisplay_centerButtonLight": "set Center Button light to {COLOR}",
    "flipperdisplay_color-selector-vertical": "{field_flipperdisplay_color-selector-vertical}",
    "flipperdisplay_custom-icon-direction": "{field_flipperdisplay_custom-icon-direction}",
    "flipperdisplay_custom-matrix": "{field_flipperdisplay_custom-matrix}",
    "flipperdisplay_custom-matrix-3x3-color": "{field_flipperdisplay_custom-matrix-3x3-color}",
    "flipperdisplay_custom-matrix-3x3-port": "{field_flipperdisplay_custom-matrix-3x3-port}",
    "flipperdisplay_custom-matrix-dynamic-led-index": "{field_flipperdisplay_custom-matrix-dynamic-led-index}",
    "flipperdisplay_custom-matrix-port": "{field_flipperdisplay_custom-matrix-port}",
    "flipperdisplay_distance-sensor-selector": "{field_flipperdisplay_distance-sensor-selector}",
    "flipperdisplay_led-selector": "{field_flipperdisplay_led-selector}",
    "flipperdisplay_ledMatrix": "{PORT} turn on {MATRIX}",
    "flipperdisplay_ledMatrixBrightness": "{PORT} set pixel brightness to {BRIGHTNESS} %",
    "flipperdisplay_ledMatrixColor": "{PORT} set pixel at {X},{Y} to {COLOR} at {BRIGHTNESS} %",
    "flipperdisplay_ledMatrixFor": "{PORT} turn on {MATRIX} for {VALUE} seconds",
    "flipperdisplay_ledMatrixOff": "{PORT} turn off pixels",
    "flipperdisplay_ledMatrixOn": "{PORT} set pixel at {X},{Y} to {BRIGHTNESS} %",
    "flipperdisplay_ledMatrixRotateDirection": "{PORT} rotate {DIRECTION}",
    "flipperdisplay_ledMatrixRotateOrientation": "{PORT} set orientation to {ORIENTATION}",
    "flipperdisplay_ledMatrixText": "{PORT} write {TEXT}",
    "flipperdisplay_menu_orientation": "{orientation}",
    "flipperdisplay_ultrasonicLightUp": "{PORT} light up {VALUE}",
    "flipperevents_color-selector": "{field_flipperevents_color-selector}",
    "flipperevents_color-sensor-selector": "{field_flipperevents_color-sensor-selector}",
    "flipperevents_custom-tilted": "{field_flipperevents_custom-tilted}",
    "flipperevents_distance-sensor-selector": "{field_flipperevents_distance-sensor-selector}",
    "flipperevents_force-sensor-selector": "{field_flipperevents_force-sensor-selector}",
    "flipperevents_whenButton": "when {BUTTON} Button {EVENT}",
    "flipperevents_whenColor": "{PORT} when color is {OPTION}",
    "flipperevents_whenCondition": "when {CONDITION}",
    "flipperevents_whenDistance": "{PORT} when {COMPARATOR} {VALUE} {UNIT}",
    "flipperevents_whenGesture": "when {EVENT}",
    "flipperevents_whenGreaterThan": "when {OPTION} > {VALUE}",
    "flipperevents_whenOrientation": "when {VALUE} is up",
    "flipperevents_whenPressed": "{PORT} when {OPTION}",
    "flipperevents_whenProgramStarts": "when program starts",
    "flipperevents_whenTilted": "when tilted {VALUE}",
    "flipperevents_whenTimer": "when timer > {VALUE}",
    "flipperlight_centerButtonLight": "set Power BUtton light to {COLOR}",
    "flipperlight_color-matrix-selector": "{field_flipperlight_color-matrix-selector}",
    "flipperlight_color-matrix-selector": "{field_flipperlight_color-matrix-selector}",
    "flipperlight_color-matrix-selector": "{field_flipperlight_color-matrix-selector}",
    "flipperlight_color-matrix-selector": "{field_flipperlight_color-matrix-selector}",
    "flipperlight_color-matrix-selector": "{field_flipperlight_color-matrix-selector}",
    "flipperlight_color-matrix-selector": "{field_flipperlight_color-matrix-selector}",
    "flipperlight_color-matrix-selector": "{field_flipperlight_color-matrix-selector}",
    "flipperlight_color-selector-vertical": "{field_flipperlight_color-selector-vertical}",
    "flipperlight_color-selector-vertical": "{field_flipperlight_color-selector-vertical}",
    "flipperlight_custom-icon-direction": "{field_flipperlight_custom-icon-direction}",
    "flipperlight_custom-icon-direction": "{field_flipperlight_custom-icon-direction}",
    "flipperlight_distance-sensor-selector": "{field_flipperlight_distance-sensor-selector}",
    "flipperlight_led-selector": "{field_flipperlight_led-selector}",
    "flipperlight_lightColorMatrixImageOn": "{PORT} turn on {MATRIX}",
    "flipperlight_lightColorMatrixImageOnForTime": "{PORT} turn on {MATRIX} for {VALUE} seconds",
    "flipperlight_lightColorMatrixOff": "{PORT} turn off pixels",
    "flipperlight_lightColorMatrixRotate": "{PORT} rotate {DIRECTION}",
    "flipperlight_lightColorMatrixSetBrightness": "{PORT} set pixel brightness to {BRIGHTNESS} %",
    "flipperlight_lightColorMatrixSetOrientation": "{PORT} set orientation to {ORIENTATION}",
    "flipperlight_lightColorMatrixSetPixel": "{PORT} set pixel at {X},{Y} to {COLOR} at {BRIGHTNESS} %",
    "flipperlight_lightDisplayImageOn": "turn on {MATRIX}",
    "flipperlight_lightDisplayImageOnForTime": "turn on {MATRIX} for {VALUE} seconds",
    "flipperlight_lightDisplayOff": "turn off pixels",
    "flipperlight_lightDisplayRotate": "rotate {DIRECTION}",
    "flipperlight_lightDisplaySetBrightness": "set pixel brightness to {BRIGHTNESS} %",
    "flipperlight_lightDisplaySetOrientation": "set orientation to {ORIENTATION}",
    "flipperlight_lightDisplaySetPixel": "set pixel at {X},{Y} to {BRIGHTNESS} %",
    "flipperlight_lightDisplayText": "write {TEXT}",
    "flipperlight_matrix-3x3-color-image": "{field_flipperlight_matrix-3x3-color-image}",
    "flipperlight_matrix-3x3-color-image": "{field_flipperlight_matrix-3x3-color-image}",
    "flipperlight_matrix-5x5-brightness-image": "{field_flipperlight_matrix-5x5-brightness-image}",
    "flipperlight_matrix-pixel-index": "{field_flipperlight_matrix-pixel-index}",
    "flipperlight_matrix-pixel-index": "{field_flipperlight_matrix-pixel-index}",
    "flipperlight_matrix-pixel-index": "{field_flipperlight_matrix-pixel-index}",
    "flipperlight_matrix-pixel-index": "{field_flipperlight_matrix-pixel-index}",
    "flipperlight_menu_orientation": "{orientation}",
    "flipperlight_ultrasonicLightUp": "{PORT} light up {VALUE}",
    "flippermoremotor_menu_acceleration": "{acceleration}",
    "flippermoremotor_motorDidMovement": "{PORT} was the motor interrupted?",
    "flippermoremotor_motorGoToRelativePosition": "{PORT} go to relative position {POSITION} at {SPEED} % speed",
    "flippermoremotor_motorSetAcceleration": "{PORT} set acceleration to {ACCELERATION}",
    "flippermoremotor_motorSetDegreeCounted": "{PORT} set relative position to {VALUE}",
    "flippermoremotor_motorSetStallDetection": "{PORT} turn stall detection {ENABLED}",
    "flippermoremotor_motorSetStopMethod": "{PORT} set motor to {STOP} at stop",
    "flippermoremotor_motorStartPower": "{PORT} start motor at {POWER} % power",
    "flippermoremotor_motorStartSpeed": "{PORT} start motor at {SPEED} % speed",
    "flippermoremotor_motorTurnForSpeed": "{PORT} run for {VALUE} {UNIT} at {SPEED} % speed",
    "flippermoremotor_multiple-port-selector": "{field_flippermoremotor_multiple-port-selector}",
    "flippermoremotor_position": "{PORT} relative position",
    "flippermoremotor_power": "{PORT} power",
    "flippermoremotor_single-motor-selector": "{field_flippermoremotor_single-motor-selector}",
    "flippermoremove_menu_acceleration": "{acceleration}",
    "flippermoremove_moveDidMovement": "was movement interrupted?",
    "flippermoremove_moveDistanceAtSpeed": "move for {DISTANCE} {UNIT} at {LEFT} {RIGHT} % speed",
    "flippermoremove_movementSetAcceleration": "set movement acceleration to {ACCELERATION}",
    "flippermoremove_movementSetStopMethod": "set movement motors to {STOP} at stop",
    "flippermoremove_rotation-wheel": "{field_flippermoremove_rotation-wheel}",
    "flippermoremove_startDualPower": "start moving at {LEFT} {RIGHT} % power",
    "flippermoremove_startDualSpeed": "start moving at {LEFT} {RIGHT} % speed",
    "flippermoremove_startSteerAtPower": "start moving {STEERING} at {POWER} % power",
    "flippermoremove_startSteerAtSpeed": "start moving {STEERING} at {SPEED} % speed",
    "flippermoremove_steerDistanceAtSpeed": "move {STEERING} for {DISTANCE} {UNIT} at {SPEED} % speed",
    "flippermoresensors_acceleration": "acceleration {AXIS}",
    "flippermoresensors_angularVelocity": "angular velocity {AXIS}",
    "flippermoresensors_color-sensor-selector": "{field_flippermoresensors_color-sensor-selector}",
    "flippermoresensors_motion": "gesture",
    "flippermoresensors_orientation": "orientation",
    "flippermoresensors_rawColor": "{PORT} raw {COLOR}",
    "flippermoresensors_setOrientation": "set yaw axis to {UP}",
    "flippermotor_absolutePosition": "{PORT} position",
    "flippermotor_custom-angle": "{field_flippermotor_custom-angle}",
    "flippermotor_custom-icon-direction": "{field_flippermotor_custom-icon-direction}",
    "flippermotor_motorGoDirectionToPosition": "{PORT} go {DIRECTION} to position {POSITION}",
    "flippermotor_motorSetSpeed": "{PORT} set speed to {SPEED} %",
    "flippermotor_motorStartDirection": "{PORT} start motor {DIRECTION}",
    "flippermotor_motorStop": "{PORT} stop motor",
    "flippermotor_motorTurnForDirection": "{PORT} run {DIRECTION} for {VALUE} {UNIT}",
    "flippermotor_multiple-port-selector": "{field_flippermotor_multiple-port-selector}",
    "flippermotor_single-motor-selector": "{field_flippermotor_single-motor-selector}",
    "flippermotor_single-motor-selector": "{field_flippermotor_single-motor-selector}",
    "flippermotor_speed": "{PORT} speed",
    "flippermove_custom-icon-direction": "{field_flippermove_custom-icon-direction}",
    "flippermove_custom-set-move-distance-number": "{field_flippermove_custom-set-move-distance-number}",
    "flippermove_move": "move {DIRECTION} for {VALUE} {UNIT}",
    "flippermove_movement-port-selector": "{field_flippermove_movement-port-selector}",
    "flippermove_movementSpeed": "set movement speed to {SPEED} %",
    "flippermove_rotation-wheel": "{field_flippermove_rotation-wheel}",
    "flippermove_setDistance": "set 1 motor rotation to {DISTANCE} {UNIT} moved",
    "flippermove_setMovementPair": "set movement motors to {PAIR}",
    "flippermove_startMove": "start moving {DIRECTION}",
    "flippermove_startSteer": "start moving {STEERING}",
    "flippermove_steer": "move {STEERING} for {VALUE} {UNIT}",
    "flippermove_stopMove": "stop moving",
    "flippermusic_changeTempo": "change tempo by {TEMPO}",
    "flippermusic_getTempo": "tempo",
    "flippermusic_menu_DRUM": "{DRUM}",
    "flippermusic_menu_INSTRUMENT": "{INSTRUMENT}",
    "flippermusic_playDrumForBeats": "play drum {DRUM} for {BEATS} beats",
    "flippermusic_playNoteForBeats": "play note {NOTE} for {BEATS} beats",
    "flippermusic_restForBeats": "rest for {BEATS} beats",
    "flippermusic_setInstrument": "set instrument to {INSTRUMENT}",
    "flippermusic_setTempo": "set tempo to {TEMPO}",
    "flipperoperator_isInBetween": "is {VALUE} in between {LOW} and {HIGH} ?",
    "flippersensors_buttonIsPressed": "is {BUTTON} button {EVENT} ?",
    "flippersensors_color": "{PORT} color",
    "flippersensors_color-selector": "{field_flippersensors_color-selector}",
    "flippersensors_color-sensor-selector": "{field_flippersensors_color-sensor-selector}",
    "flippersensors_custom-tilted": "{field_flippersensors_custom-tilted}",
    "flippersensors_distance": "{PORT} distance in {UNIT}",
    "flippersensors_distance-sensor-selector": "{field_flippersensors_distance-sensor-selector}",
    "flippersensors_distance-sensor-selector": "{field_flippersensors_distance-sensor-selector}",
    "flippersensors_force": "{PORT} pressure in {UNIT}",
    "flippersensors_force-sensor-selector": "{field_flippersensors_force-sensor-selector}",
    "flippersensors_force-sensor-selector": "{field_flippersensors_force-sensor-selector}",
    "flippersensors_isColor": "{PORT} is color {VALUE} ?",
    "flippersensors_isDistance": "{PORT} is {COMPARATOR} {VALUE} {UNIT} ?",
    "flippersensors_isPressed": "{PORT} is {OPTION}",
    "flippersensors_isReflectivity": "{PORT} reflection {COMPARATOR} {VALUE} % ?",
    "flippersensors_isTilted": "is tilted {VALUE} ?",
    "flippersensors_ismotion": "is {MOTION} ?",
    "flippersensors_isorientation": "is {ORIENTATION} up ?",
    "flippersensors_loudness": "loudness",
    "flippersensors_orientationAxis": "{AXIS} angle",
    "flippersensors_reflectivity": "{PORT} reflected light",
    "flippersensors_resetTimer": "reset timer",
    "flippersensors_resetYaw": "set yaw angle to 0",
    "flippersensors_timer": "timer",
    "flippersound_beep": "start playing beep {NOTE}",
    "flippersound_beepForTime": "play beep {NOTE} for {DURATION} seconds",
    "flippersound_custom-piano": "{field_flippersound_custom-piano}",
    "flippersound_custom-piano": "{field_flippersound_custom-piano}",
    "flippersound_playSound": "start sound {SOUND}",
    "flippersound_playSoundUntilDone": "play sound {SOUND} until done",
    "flippersound_sound-selector": "{field_flippersound_sound-selector}",
    "flippersound_sound-selector": "{field_flippersound_sound-selector}",
    "flippersound_stopSound": "stop all sounds",
    "horizontalbargraphmonitor_HorizontalBarGraphViewModeSelect": "{field_horizontalbargraphmonitor_HorizontalBarGraphViewModeSelect}",
    "horizontalbargraphmonitor_barGraphChangeValue": "add 1 to bar graph {COLOR}",
    "horizontalbargraphmonitor_barGraphClearData": "clear bar graph",
    "horizontalbargraphmonitor_barGraphViewMode": "full-screen bar graph {VALUE}",
    "horizontalbargraphmonitor_horizontal-bar-graph-change": "{field_horizontalbargraphmonitor_horizontal-bar-graph-change}",
    "horizontalcontrol_stopOtherStacks": "stop",
    "horizontaldisplay_horizontal-3x3-matrix": "{field_horizontaldisplay_horizontal-3x3-matrix}",
    "horizontaldisplay_horizontal-led-image": "{field_horizontaldisplay_horizontal-led-image}",
    "horizontaldisplay_ledImage": "5x5 light {MATRIX}",
    "horizontaldisplay_ledMatrix": "3x3 light {MATRIX}",
    "horizontaldisplay_ledMatrixRandom": "random 3x3 light",
    "horizontaldisplay_ledRandom": "random 5x5 light",
    "horizontaldisplaymonitor_displaySetImageWithBuiltInDelay": "display image {VALUE}",
    "horizontaldisplaymonitor_displaySetMonitorFullscreen": "full-screen display {VALUE}",
    "horizontaldisplaymonitor_displayWriteWithBuiltInDelay": "display text {TEXT}",
    "horizontaldisplaymonitor_horizontal-image-select": "{field_horizontaldisplaymonitor_horizontal-image-select}",
    "horizontaldisplaymonitor_horizontal-text": "{field_horizontaldisplaymonitor_horizontal-text}",
    "horizontaldisplaymonitor_horizontal-view-mode-select": "{field_horizontaldisplaymonitor_horizontal-view-mode-select}",
    "horizontalevents_HorizontalTilted": "{field_horizontalevents_HorizontalTilted}",
    "horizontalevents_broadcast": "send message {CHOICE}",
    "horizontalevents_horizontal-broadcast-receive": "{field_horizontalevents_horizontal-broadcast-receive}",
    "horizontalevents_horizontal-broadcast-send": "{field_horizontalevents_horizontal-broadcast-send}",
    "horizontalevents_horizontal-color-sensor": "{field_horizontalevents_horizontal-color-sensor}",
    "horizontalevents_horizontal-distance": "{field_horizontalevents_horizontal-distance}",
    "horizontalevents_horizontal-loudness": "{field_horizontalevents_horizontal-loudness}",
    "horizontalevents_horizontal-pressed": "{field_horizontalevents_horizontal-pressed}",
    "horizontalevents_whenBroadcast": "received message {CHOICE}",
    "horizontalevents_whenCloserThan": "distance sensor {DISTANCE}",
    "horizontalevents_whenColor": "color sensor {COLOR}",
    "horizontalevents_whenLouderThan": "loudness {LOUDNESS}",
    "horizontalevents_whenPressed": "force sensor {OPTION}",
    "horizontalevents_whenProgramStarts": "play",
    "horizontalevents_whenTilted": "tilt sensor {VALUE}",
    "horizontalmotor_horizontal-motor-speed": "{field_horizontalmotor_horizontal-motor-speed}",
    "horizontalmotor_motorSetSpeed": "motor speed {SPEED}",
    "horizontalmotor_motorStop": "stop motor",
    "horizontalmotor_motorTurnClockwiseRotations": "run motor clockwise {ROTATIONS}",
    "horizontalmotor_motorTurnCounterClockwiseRotations": "run motor counterclockwise {ROTATIONS}",
    "horizontalmotor_rotation-clockwise": "{field_horizontalmotor_rotation-clockwise}",
    "horizontalmotor_rotation-counter-clockwise": "{field_horizontalmotor_rotation-counter-clockwise}",
    "horizontalmove_horizontal-move-positive-number": "{field_horizontalmove_horizontal-move-positive-number}",
    "horizontalmove_horizontal-move-speed": "{field_horizontalmove_horizontal-move-speed}",
    "horizontalmove_moveBackward": "move backward {ROTATIONS}",
    "horizontalmove_moveForward": "move forward {ROTATIONS}",
    "horizontalmove_moveSetSpeed": "movement speed {SPEED}",
    "horizontalmove_moveStop": "stop moving",
    "horizontalmove_moveTurnClockwiseRotations": "turn clockwise {ROTATIONS}",
    "horizontalmove_moveTurnCounterClockwiseRotations": "turn counterclockwise {ROTATIONS}",
    "horizontalsound_horizontal-animal-sound": "{field_horizontalsound_horizontal-animal-sound}",
    "horizontalsound_horizontal-effect-sound": "{field_horizontalsound_horizontal-effect-sound}",
    "horizontalsound_horizontal-music-sound": "{field_horizontalsound_horizontal-music-sound}",
    "horizontalsound_horizontal-recorded-sound": "{field_horizontalsound_horizontal-recorded-sound}",
    "horizontalsound_playAnimalSoundUntilDone": "animal sound {SOUND}",
    "horizontalsound_playEffectSoundUntilDone": "sound effect {SOUND}",
    "horizontalsound_playMusicSoundUntilDone": "music {SOUND}",
    "horizontalsound_playRecordedSound": "record sound {SOUND}",
    "linegraphmonitor_custom-color": "{field_linegraphmonitor_custom-color}",
    "linegraphmonitor_custom-color": "{field_linegraphmonitor_custom-color}",
    "linegraphmonitor_custom-color": "{field_linegraphmonitor_custom-color}",
    "linegraphmonitor_lineGraphAddTo": "plot {VALUE} to {COLOR} line",
    "linegraphmonitor_lineGraphClear": "clear line graph",
    "linegraphmonitor_lineGraphClearLine": "clear {COLOR} line",
    "linegraphmonitor_lineGraphFullscreen": "show line graph {VALUE}",
    "linegraphmonitor_lineGraphGetValue": "{VALUE} value of {COLOR} line",
    "linegraphmonitor_lineGraphHide": "hide line graph",
    "linegraphmonitor_lineGraphResetTime": "reset line graph time",
    "linegraphmonitor_lineGraphTimer": "line graph timer",
    "note": "{NOTE}",
    "operator_add": "({NUM1} + {NUM2})",
    "operator_and": "({OPERAND1} and {OPERAND2})",
    "operator_contains": "{STRING1} contains {STRING2} ?",
    "operator_divide": "({NUM1} / {NUM2})",
    "operator_equals": "({OPERAND1} = {OPERAND2})",
    "operator_gt": "({OPERAND1} > {OPERAND2})",
    "operator_join": "join {STRING1} {STRING2}",
    "operator_length": "length of {STRING}",
    "operator_letter_of": "letter {LETTER} of {STRING}",
    "operator_lt": "({OPERAND1} < {OPERAND2})",
    "operator_mathop": "({OPERATOR} of {NUM})",
    "operator_mod": "{NUM1} mod {NUM2}",
    "operator_multiply": "({NUM1} * {NUM2})",
    "operator_not": "(not {OPERAND})",
    "operator_or": "({OPERAND1} or {OPERAND2})",
    "operator_random": "pick random {FROM} to {TO}",
    "operator_round": "round {NUM}",
    "operator_subtract": "({NUM1} - {NUM2})",
    "procedures_call": "run ",
    "procedures_definition": "define {custom_block}",
    "sound_changeeffectby": "change {EFFECT} effect by {VALUE}",
    "sound_changevolumeby": "change volume by {VOLUME}",
    "sound_cleareffects": "clear sound effects",
    "sound_seteffectto": "set {EFFECT} effect to {VALUE}",
    "sound_setvolumeto": "set volume to {VOLUME} %",
    "sound_volume": "volume",
    "weather_changeTime": "change forecast by {HOURS} hours",
    "weather_isCondition": "is {CONDITION} ?",
    "weather_location": "location",
    "weather_menu_forecastTo": "{forecastTo}",
    "weather_precipitation": "precipitation in {UNIT}",
    "weather_pressure": "air pressure in hPa",
    "weather_resetTimeOffset": "set forecast to now",
    "weather_setForecast": "set forecast to {DAYSAWAY} at {HOUR} o'clock",
    "weather_setLocation": "set location to {LOCATION}",
    "weather_temperature": "temperature in {UNIT}",
    "weather_timeOffset": "forecast time",
    "weather_windDirection": "wind direction",
    "weather_windSpeed": "wind speed in {UNIT}"
  }
}
