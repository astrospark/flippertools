{
  "en-us": {
    "argument_reporter_string_number": "{VALUE}",
    "control_else": "else",
    "control_forever": "forever",
    "control_if": "if {CONDITION} then",
    "control_if_else": "if {CONDITION} then",
    "control_repeat": "repeat {TIMES}",
    "control_repeat_until": "repeat until {CONDITION}",
    "control_wait": "wait {DURATION} seconds",
    "control_wait_until": "wait until {CONDITION}",
    "data_setvariableto": "set {VARIABLE} to {VALUE}",
    "event_broadcast": "broadcast {BROADCAST_INPUT}",
    "flippercontrol_stop": "stop {STOP_OPTION}",
    "flipperevents_whenProgramStarts": "when program starts",
    "flipperlight_lightDisplayImageOnForTime": "turn on {MATRIX} for {VALUE} seconds",
    "flipperlight_matrix-5x5-brightness-image": "{field_flipperlight_matrix-5x5-brightness-image}",
    "flippermoremotor_motorSetDegreeCounted": "{PORT} set relative position to {VALUE}",
    "flippermoremotor_multiple-port-selector": "{field_flippermoremotor_multiple-port-selector}",
    "flippermoremotor_position": "{PORT} relative position",
    "flippermoremotor_single-motor-selector": "{field_flippermoremotor_single-motor-selector}",
    "flippermoremove_menu_acceleration": "{acceleration}",
    "flippermoremove_movementSetAcceleration": "set movement acceleration to {ACCELERATION}",
    "flippermoremove_rotation-wheel": "{field_flippermoremove_rotation-wheel}",
    "flippermoremove_startDualPower": "start moving at {LEFT} {RIGHT} % power",
    "flippermoremove_startDualSpeed": "start moving at {LEFT} {RIGHT} % speed",
    "flippermoremove_startSteerAtSpeed": "start moving {STEERING} at {SPEED} % speed",
    "flippermoremove_steerDistanceAtSpeed": "move {STEERING} for {DISTANCE} {UNIT} at {SPEED} % speed",
    "flippermoresensors_acceleration": "acceleration {AXIS}",
    "flippermotor_custom-angle": "{field_flippermotor_custom-angle}",
    "flippermotor_custom-icon-direction": "{field_flippermotor_custom-icon-direction}",
    "flippermotor_motorGoDirectionToPosition": "{PORT} go {DIRECTION} to position {POSITION}",
    "flippermotor_motorTurnForDirection": "{PORT} run {DIRECTION} for {VALUE} {UNIT}",
    "flippermotor_multiple-port-selector": "{field_flippermotor_multiple-port-selector}",
    "flippermove_custom-icon-direction": "{field_flippermove_custom-icon-direction}",
    "flippermove_move": "move {DIRECTION} for {VALUE} {UNIT}",
    "flippermove_movement-port-selector": "{field_flippermove_movement-port-selector}",
    "flippermove_movementSpeed": "set movement speed to {SPEED} %",
    "flippermove_rotation-wheel": "{field_flippermove_rotation-wheel}",
    "flippermove_setDistance": "set 1 motor rotation to {DISTANCE} {UNIT} moved",
    "flippermove_setMovementPair": "set movement motors to {PAIR}",
    "flippermove_startMove": "start moving {DIRECTION}",
    "flippermove_startSteer": "start moving {STEERING}",
    "flippermove_steer": "move {STEERING} for {VALUE} {UNIT}",
    "flippermove_stopMove": "stop moving",
    "flippersensors_color-selector": "{field_flippersensors_color-selector}",
    "flippersensors_color-sensor-selector": "{field_flippersensors_color-sensor-selector}",
    "flippersensors_isColor": "{PORT} is color {VALUE} ?",
    "flippersensors_resetYaw": "set yaw angle to 0",
    "horizontalbargraphmonitor_HorizontalBarGraphViewModeSelect": "{field_horizontalbargraphmonitor_HorizontalBarGraphViewModeSelect}",
    "horizontalbargraphmonitor_barGraphChangeValue": "add 1 to bar graph {COLOR}",
    "horizontalbargraphmonitor_barGraphClearData": "clear bar graph",
    "horizontalbargraphmonitor_barGraphViewMode": "full-screen bar graph {VALUE}",
    "horizontalbargraphmonitor_horizontal-bar-graph-change": "{field_horizontalbargraphmonitor_horizontal-bar-graph-change}",
    "horizontalcontrol_stopOtherStacks": "stop",
    "horizontaldisplay_horizontal-3x3-matrix": "{field_horizontaldisplay_horizontal-3x3-matrix}",
    "horizontaldisplay_horizontal-led-image": "{field_horizontaldisplay_horizontal-led-image}",
    "horizontaldisplay_ledImage": "5x5 light {MATRIX}",
    "horizontaldisplay_ledMatrix": "3x3 light {MATRIX}",
    "horizontaldisplay_ledMatrixRandom": "random 3x3 light",
    "horizontaldisplay_ledRandom": "random 5x5 light",
    "horizontaldisplaymonitor_displaySetImageWithBuiltInDelay": "display image {VALUE}",
    "horizontaldisplaymonitor_displaySetMonitorFullscreen": "full-screen display {VALUE}",
    "horizontaldisplaymonitor_displayWriteWithBuiltInDelay": "display text {TEXT}",
    "horizontaldisplaymonitor_horizontal-image-select": "{field_horizontaldisplaymonitor_horizontal-image-select}",
    "horizontaldisplaymonitor_horizontal-text": "{field_horizontaldisplaymonitor_horizontal-text}",
    "horizontaldisplaymonitor_horizontal-view-mode-select": "{field_horizontaldisplaymonitor_horizontal-view-mode-select}",
    "horizontalevents_HorizontalTilted": "{field_horizontalevents_HorizontalTilted}",
    "horizontalevents_broadcast": "send message {CHOICE}",
    "horizontalevents_horizontal-broadcast-receive": "{field_horizontalevents_horizontal-broadcast-receive}",
    "horizontalevents_horizontal-broadcast-send": "{field_horizontalevents_horizontal-broadcast-send}",
    "horizontalevents_horizontal-color-sensor": "{field_horizontalevents_horizontal-color-sensor}",
    "horizontalevents_horizontal-distance": "{field_horizontalevents_horizontal-distance}",
    "horizontalevents_horizontal-loudness": "{field_horizontalevents_horizontal-loudness}",
    "horizontalevents_horizontal-pressed": "{field_horizontalevents_horizontal-pressed}",
    "horizontalevents_whenBroadcast": "received message {CHOICE}",
    "horizontalevents_whenCloserThan": "distance sensor {DISTANCE}",
    "horizontalevents_whenColor": "color sensor {COLOR}",
    "horizontalevents_whenLouderThan": "loudness {LOUDNESS}",
    "horizontalevents_whenPressed": "force sensor {OPTION}",
    "horizontalevents_whenProgramStarts": "play",
    "horizontalevents_whenTilted": "tilt sensor {VALUE}",
    "horizontalmotor_horizontal-motor-speed": "{field_horizontalmotor_horizontal-motor-speed}",
    "horizontalmotor_motorSetSpeed": "motor speed {SPEED}",
    "horizontalmotor_motorStop": "stop motor",
    "horizontalmotor_motorTurnClockwiseRotations": "run motor clockwise {ROTATIONS}",
    "horizontalmotor_motorTurnCounterClockwiseRotations": "run motor counterclockwise {ROTATIONS}",
    "horizontalmotor_rotation-clockwise": "{field_horizontalmotor_rotation-clockwise}",
    "horizontalmotor_rotation-counter-clockwise": "{field_horizontalmotor_rotation-counter-clockwise}",
    "horizontalmove_horizontal-move-positive-number": "{field_horizontalmove_horizontal-move-positive-number}",
    "horizontalmove_horizontal-move-speed": "{field_horizontalmove_horizontal-move-speed}",
    "horizontalmove_moveBackward": "move backward {ROTATIONS}",
    "horizontalmove_moveForward": "move forward {ROTATIONS}",
    "horizontalmove_moveSetSpeed": "movement speed {SPEED}",
    "horizontalmove_moveStop": "stop moving",
    "horizontalmove_moveTurnClockwiseRotations": "turn clockwise {ROTATIONS}",
    "horizontalmove_moveTurnCounterClockwiseRotations": "turn counterclockwise {ROTATIONS}",
    "horizontalsound_horizontal-animal-sound": "{field_horizontalsound_horizontal-animal-sound}",
    "horizontalsound_horizontal-effect-sound": "{field_horizontalsound_horizontal-effect-sound}",
    "horizontalsound_horizontal-music-sound": "{field_horizontalsound_horizontal-music-sound}",
    "horizontalsound_horizontal-recorded-sound": "{field_horizontalsound_horizontal-recorded-sound}",
    "horizontalsound_playAnimalSoundUntilDone": "animal sound {SOUND}",
    "horizontalsound_playEffectSoundUntilDone": "sound effect {SOUND}",
    "horizontalsound_playMusicSoundUntilDone": "music {SOUND}",
    "horizontalsound_playRecordedSound": "record sound {SOUND}",
    "operator_add": "({NUM1} + {NUM2})",
    "operator_and": "({OPERAND1} and {OPERAND2})",
    "operator_divide": "({NUM1} / {NUM2})",
    "operator_equals": "({OPERAND1} = {OPERAND2})",
    "operator_gt": "({OPERAND1} > {OPERAND2})",
    "operator_lt": "({OPERAND1} < {OPERAND2})",
    "operator_mathop": "({OPERATOR} of {NUM})",
    "operator_multiply": "({NUM1} * {NUM2})",
    "operator_not": "(not {OPERAND})",
    "operator_subtract": "({NUM1} - {NUM2})",
    "procedures_call": "run ",
    "procedures_definition": "define {custom_block}"
  }
}
